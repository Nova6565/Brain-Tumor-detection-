/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2024-05-15 23:08:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import advanced.Recipe;
import advanced.User;
import advanced.Ingredients;
import java.util.ArrayList;

public final class ingredientsController_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("advanced.Ingredients");
    _jspx_imports_classes.add("advanced.User");
    _jspx_imports_classes.add("advanced.Recipe");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      advanced.Database db = null;
      synchronized (application) {
        db = (advanced.Database) _jspx_page_context.getAttribute("db", jakarta.servlet.jsp.PageContext.APPLICATION_SCOPE);
        if (db == null){
          db = new advanced.Database();
          _jspx_page_context.setAttribute("db", db, jakarta.servlet.jsp.PageContext.APPLICATION_SCOPE);
          out.write('\r');
          out.write('\n');
        }
      }
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\">\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">/* Error Message Styling */\r\n");
      out.write(".error-msg {\r\n");
      out.write("    color: #ff0000; /* Red color for errors */\r\n");
      out.write("    background-color: #ffecec; /* Light red background */\r\n");
      out.write("    border: 1px solid #d60000; /* Darker red border */\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    margin: 10px 0;\r\n");
      out.write("    margin-top: 10%;\r\n");
      out.write("    position: absolute; /* Position can be adjusted to absolute if needed */\r\n");
      out.write("    top: 10%; /* Adjust this value based on your layout */\r\n");
      out.write("    left: 50%;\r\n");
      out.write("    transform: translateX(-50%); /* Centers the message */\r\n");
      out.write("    width: 20%; /* Or adjust as needed */\r\n");
      out.write("    box-sizing: border-box; /* Includes padding and border in width */\r\n");
      out.write("    z-index: 1000; /* Ensures it's on top of other content */\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    display: inline-block;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Sign up form container adjustments */\r\n");
      out.write(".form-container {\r\n");
      out.write("    position: relative; /* Relative positioning to place the error message absolutely within it */\r\n");
      out.write("    padding-top: 60px; /* Adjust padding to make space for the error message */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".success-msg {\r\n");
      out.write("    color: #008000; /* Green color for success */\r\n");
      out.write("    background-color: #ecffec; /* Light green background */\r\n");
      out.write("    border: 1px solid #006400; /* Dark green border */\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    margin: 10px 0;\r\n");
      out.write("    margin-top: 10%;\r\n");
      out.write("    position: absolute; /* Position can be adjusted to absolute if needed */\r\n");
      out.write("    top: 10%; /* Adjust this value based on your layout */\r\n");
      out.write("    left: 50%;\r\n");
      out.write("    transform: translateX(-50%); /* Centers the message */\r\n");
      out.write("    width: 20%; /* Or adjust as needed */\r\n");
      out.write("    box-sizing: border-box; /* Includes padding and border in width */\r\n");
      out.write("    z-index: 1000; /* Ensures it's on top of other content */\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    display:Â inline-block;\r\n");
      out.write("}</style>\r\n");
      out.write(" <style>\r\n");
      out.write("        .hidden {\r\n");
      out.write("            display: none;\r\n");
      out.write("        }\r\n");
      out.write("        #details {\r\n");
      out.write("            background-color: #f4e6d2;\r\n");
      out.write("            color: #be872c;\r\n");
      out.write("        }\r\n");
      out.write("        .favorite-btn {\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            color: grey; /* Default color */\r\n");
      out.write("            border: none; /* Remove border for a cleaner look */\r\n");
      out.write("            background: none; /* Remove background */\r\n");
      out.write("        }\r\n");
      out.write("        .favorite-btn.active {\r\n");
      out.write("            color: red; /* Color when the icon is active */\r\n");
      out.write("        }\r\n");
      out.write("        .btn-custom {\r\n");
      out.write("            color: #be872c; /* Golden text */\r\n");
      out.write("            background-color: #f4e6d2; /* Light peach background */\r\n");
      out.write("            border-color: #be872c; /* Golden border */\r\n");
      out.write("        }\r\n");
      out.write("        .card-header {\r\n");
      out.write("            background-color: #be872c; /* Golden background */\r\n");
      out.write("            color: white; /* White text */\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<a href='Homaepage.jsp'>home</a>\r\n");
      out.write("<body style=\"color:#be872c; background-color:#f4e6d2;\">\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <div class=\"row justify-content-center\">\r\n");
      out.write("            <div class=\"col-md-7\">\r\n");
      out.write("                <div class=\"card mt-5\">\r\n");
      out.write("                    <div class=\"card-header text-center\">\r\n");
      out.write("                        <h4>search for your favourite recipe</h4>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"card-body\">\r\n");
      out.write("                        <div class=\"row\">\r\n");
      out.write("                            <div class=\"col-md-12\">\r\n");
      out.write("                                <hr>\r\n");
      out.write("                                \r\n");
      out.write("	");

			/*db.insertIngredient("banana","Fruit");
			db.insertIngredient("carrot","Vegetable");
			db.insertIngredient("apple","Fruit");
			db.insertIngredient("lemon","Vegetable");
			db.insertIngredient("onion","Vegetable");
			db.insertIngredient("garlic","Vegetable");
			db.insertIngredient("strawberry","Fruit");
			db.insertIngredient("broccoli","Vegetable");
			db.insertIngredient("tomato","Vegetable");
			db.insertIngredient("cucumber","Vegetable");
			db.insertIngredient("ginger","Spice");
			db.insertIngredient("cinnamon","Spice");
			db.insertIngredient("parsley","Vegetable");
			db.insertIngredient("vinegar","Liquid");
			db.insertIngredient("coriander","Vegetable");
			db.insertIngredient("bay Leaf","Spice");
			db.insertIngredient("rosemary","Spice");
			db.insertIngredient("curry","Spice");
			db.insertIngredient("7 spices","Spice");
			db.insertIngredient("salt","Spice");
			db.insertIngredient("paprika","Spice");
			db.insertIngredient("chicken breast","Protein");
			db.insertIngredient("salmon fillet","Protein");
			db.insertIngredient("tofu","Protein");
			db.insertIngredient("lean beef steak","Protein");
			db.insertIngredient("eggs","Protein");
			db.insertIngredient("fish","Protein");
			db.insertIngredient("tuna","Protein");
			db.insertIngredient("greek yogurt","Other");
			db.insertIngredient("cottage cheese","Other");
			db.insertIngredient("quinoa","Protein");
			db.insertIngredient("lentils", "Other");
			db.insertIngredient("milk", "Liquid");
			db.insertIngredient("oil", "Liquid");
			db.insertIngredient("olive oil", "Liquid");
			db.insertIngredient("water", "Liquid");
			db.insertIngredient("pasta", "Other");
			db.insertIngredient("bread", "Other");
			db.insertIngredient("butter", "Other");
			db.insertIngredient("cheese", "Other");
			db.insertIngredient("chicken stock", "Other");
			db.insertIngredient("yogurt", "Other");
			db.insertIngredient("cumin", "Spice");
			db.insertIngredient("mango", "Fruit");
			db.insertIngredient("grapes", "Fruit");
			db.insertIngredient("pineapple", "Fruit");
			db.insertIngredient("watermelon", "Fruit");
			db.insertIngredient("kiwi", "Fruit");
			db.insertIngredient("pear", "Fruit");
			db.insertIngredient("peach", "Fruit");
			db.insertIngredient("blueberry", "Fruit");
			db.insertIngredient("cherry", "Fruit");
			db.insertIngredient("raspberry", "Fruit");
			db.insertIngredient("cantaloupe", "Fruit");
			db.insertIngredient("apricot", "Fruit");
			db.insertIngredient("plum", "Fruit");
			db.insertIngredient("coconut", "Fruit");
			db.insertIngredient("dragon fruit", "Fruit");
			db.insertIngredient("baking powder", "Spice");
			db.insertIngredient("toast", "Other");
			db.insertIngredient("cereal", "Other");
			db.insertIngredient("basmati rice", "Other");
			db.insertIngredient("brown rice", "Other");
			db.insertIngredient("white rice", "Other");
			db.insertIngredient("barley", "Other");
			db.insertIngredient("couscous", "Other");
			db.insertIngredient("black pepper", "Spice");
			db.insertIngredient("orange", "Fruit");*/
		String[] ingredients = request.getParameterValues("selected");
		ArrayList<Ingredients>ing=new ArrayList<Ingredients>();
		int f=0;
		for(String e:ingredients){
			ing.add(db.isInfFound(e));
			f=1;
		}

		User u=((User)session.getAttribute("u"));
		u.setIngredients(ing);
		if(u.seaechByIngredients()==null){
			out.print("<p class = 'error-msg'>Already has an account</p>");
			request.getRequestDispatcher("ingredientsController.jsp").include(request, response);
		}
		else{
			ArrayList<Recipe> top=u.seaechByIngredients();	
			for(Recipe r:top){
	    		out.print("<div class=\"form-group mb-3\">");
	    	    out.print("<label for=\"\">Recipe Name:</label>");
	    	    out.print("<div class=\"input-group\">");
	    	    out.print("<a href=\"FavRecipe.jsp?recipeID=" + r.getId() + "\"><button id=\"favoriteButton\" class=\"btn btn-custom favorite-btn\" type=\"button\" onclick=\"toggleFavorite(this)\">â¥</button></a>");
	    	    out.print("<input type=\"text\" value=\"" + r.getName() + "\" class=\"form-control\" readonly>");
	    	    out.print("</div>");
	    	    out.print("<button type=\"button\" class=\"btn btn-info mt-2\" onclick=\"toggleDetails('" + r.getId() + "')\">View Details</button>");
	    	    out.print("<div id=\"" + r.getId() + "\" class=\"hidden\">");
	    	    out.print("<p>Instructions: " + r.getDescription() + "</p>");
	    	    out.print("<p>Protein: " + r.getProtein() + "</p>");
	    	    out.print("<p>Carbohydrates: " + r.getCarb() + "</p>");
	    	    out.print("<p>Fats: " + r.getFats() + "</p>");
	    	    out.print("<p>Ingredients: " + db.printIng(r) + "</p>");
	    	    out.print("</div>");
	    	    out.print("</div>");
	    	}
		}
		
	
      out.write("\r\n");
      out.write("	                              </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("	<script>\r\n");
      out.write("        function toggleDetails(id) {\r\n");
      out.write("            var element = document.getElementById(id);\r\n");
      out.write("            element.style.display = (element.style.display === 'none' || !element.style.display) ? 'block' : 'none';\r\n");
      out.write("        }\r\n");
      out.write("        function toggleFavorite(element) {\r\n");
      out.write("            element.classList.toggle('active');\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-3.5.1.js\"></script>\r\n");
      out.write("    <script src=\"bootstrap.bundle.min.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
