/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2024-05-15 21:21:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.io.StringReader;
import advanced.User;
import advanced.Ingredients;
import advanced.Recipe;
import java.util.ArrayList;

public final class Recipe_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(5);
    _jspx_imports_classes.add("java.io.StringReader");
    _jspx_imports_classes.add("advanced.Ingredients");
    _jspx_imports_classes.add("advanced.User");
    _jspx_imports_classes.add("advanced.Recipe");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      advanced.Recipe r = null;
      r = (advanced.Recipe) _jspx_page_context.getAttribute("r", jakarta.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (r == null){
        r = new advanced.Recipe();
        _jspx_page_context.setAttribute("r", r, jakarta.servlet.jsp.PageContext.REQUEST_SCOPE);
        out.write('\r');
        out.write('\n');
        org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("r"), request);
        out.write('\r');
        out.write('\n');
      }
      out.write('\r');
      out.write('\n');
      out.write('	');
      advanced.Database db = null;
      synchronized (application) {
        db = (advanced.Database) _jspx_page_context.getAttribute("db", jakarta.servlet.jsp.PageContext.APPLICATION_SCOPE);
        if (db == null){
          db = new advanced.Database();
          _jspx_page_context.setAttribute("db", db, jakarta.servlet.jsp.PageContext.APPLICATION_SCOPE);
          out.write('\r');
          out.write('\n');
        }
      }
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<style>\r\n");
      out.write(".error-msg {\r\n");
      out.write("    color: #ff0000; /* Red color for errors */\r\n");
      out.write("    background-color: #ffecec; /* Light red background */\r\n");
      out.write("    border: 1px solid #d60000; /* Darker red border */\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    margin: 10px 0;\r\n");
      out.write("    margin-top: 10%;\r\n");
      out.write("    position: absolute; /* Position can be adjusted to absolute if needed */\r\n");
      out.write("    top: 10%; /* Adjust this value based on your layout */\r\n");
      out.write("    left: 50%;\r\n");
      out.write("    transform: translateX(-50%); /* Centers the message */\r\n");
      out.write("    width: 20%; /* Or adjust as needed */\r\n");
      out.write("    box-sizing: border-box; /* Includes padding and border in width */\r\n");
      out.write("    z-index: 1000; /* Ensures it's on top of other content */\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    display: inline-block;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Sign up form container adjustments */\r\n");
      out.write(".form-container {\r\n");
      out.write("    position: relative; /* Relative positioning to place the error message absolutely within it */\r\n");
      out.write("    padding-top: 60px; /* Adjust padding to make space for the error message */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".success-msg {\r\n");
      out.write("    color: #008000; /* Green color for success */\r\n");
      out.write("    background-color: #ecffec; /* Light green background */\r\n");
      out.write("    border: 1px solid #006400; /* Dark green border */\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    margin: 10px 0;\r\n");
      out.write("    margin-top: 10%;\r\n");
      out.write("    position: absolute; /* Position can be adjusted to absolute if needed */\r\n");
      out.write("    top: 10%; /* Adjust this value based on your layout */\r\n");
      out.write("    left: 50%;\r\n");
      out.write("    transform: translateX(-50%); /* Centers the message */\r\n");
      out.write("    width: 20%; /* Or adjust as needed */\r\n");
      out.write("    box-sizing: border-box; /* Includes padding and border in width */\r\n");
      out.write("    z-index: 1000; /* Ensures it's on top of other content */\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    display:Â inline-block;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

	r.calcCalories();
	r.setUser((User)session.getAttribute("u"));
	int x=db.InsertRecipe1(r);
	if(x>0){
		//db.last();
		out.print("<p class='success-msg'>Recipe added <a href='YourKitcchen.jsp'>Go insert your ingredients now !</a></p>");
		request.getRequestDispatcher("Homaepage.jsp").include(request, response);
	}
	else{
		out.print("<p class='error-msg'>Not added</p>");
		request.getRequestDispatcher("Homaepage.jsp").include(request, response);
	}
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
